"""re-add tables

Revision ID: c8f871c63375
Revises: 7fe7fb86cbff
Create Date: 2025-08-26 23:05:30.888462

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c8f871c63375'
down_revision: Union[str, Sequence[str], None] = '7fe7fb86cbff'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('event_date', sa.Date(), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('approved_by', sa.UUID(), nullable=True),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('gts_responses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('full_name', sa.Text(), nullable=False),
    sa.Column('permanent_address', sa.Text(), nullable=False),
    sa.Column('contact_email', sa.Text(), nullable=False),
    sa.Column('telephone', sa.Text(), nullable=True),
    sa.Column('mobile', sa.Text(), nullable=False),
    sa.Column('civil_status', sa.Text(), nullable=False),
    sa.Column('sex', sa.Text(), nullable=False),
    sa.Column('birthday', sa.Date(), nullable=False),
    sa.Column('degree', sa.Text(), nullable=True),
    sa.Column('specialization', sa.Text(), nullable=True),
    sa.Column('year_graduated', sa.Integer(), nullable=True),
    sa.Column('honors', sa.Text(), nullable=True),
    sa.Column('exams', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('pursued_advance_degree', sa.Boolean(), nullable=True),
    sa.Column('pursued_advance_degree_reasons', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('trainings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ever_employed', sa.Boolean(), nullable=True),
    sa.Column('is_employed', sa.Boolean(), nullable=True),
    sa.Column('employment_status', sa.Text(), nullable=True),
    sa.Column('occupation', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('company_name', sa.Text(), nullable=True),
    sa.Column('company_address', sa.Text(), nullable=True),
    sa.Column('job_sector', sa.Text(), nullable=True),
    sa.Column('place_of_work', sa.Text(), nullable=True),
    sa.Column('first_job', sa.Boolean(), nullable=True),
    sa.Column('job_related_to_course', sa.Boolean(), nullable=True),
    sa.Column('job_start_date', sa.Date(), nullable=True),
    sa.Column('months_to_first_job', sa.Integer(), nullable=True),
    sa.Column('job_find_methods', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('job_reasons', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('job_change_reasons', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('job_level_first', sa.Text(), nullable=True),
    sa.Column('job_level_current', sa.Text(), nullable=True),
    sa.Column('first_job_salary', sa.Numeric(), nullable=True),
    sa.Column('curriculum_relevance_first_job', sa.Boolean(), nullable=True),
    sa.Column('curriculum_relevance_second_job', sa.Boolean(), nullable=True),
    sa.Column('useful_competencies', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('curriculum_improvement_suggestions', sa.Text(), nullable=True),
    sa.Column('job_satisfaction', sa.Text(), nullable=True),
    sa.Column('job_satisfaction_reason', sa.Text(), nullable=True),
    sa.Column('desired_services', sa.Text(), nullable=True),
    sa.Column('job_problems', sa.Text(), nullable=True),
    sa.Column('submitted_at', sa.Date(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('event_attendance',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.String(length=10), nullable=True),
    sa.Column('registered_at', sa.DateTime(), nullable=True),
    sa.Column('attended_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('event_attendance')
    op.drop_table('gts_responses')
    op.drop_table('events')
    # ### end Alembic commands ###
