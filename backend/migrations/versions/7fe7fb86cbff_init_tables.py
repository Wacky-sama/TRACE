"""init tables

Revision ID: 7fe7fb86cbff
Revises: 
Create Date: 2025-08-26 23:00:27.220711

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7fe7fb86cbff'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('event_attendance')
    op.drop_table('gts_responses')
    op.drop_table('events')
    op.alter_column('users', 'middle_initial',
               existing_type=sa.CHAR(length=1),
               type_=sa.String(length=1),
               existing_nullable=True)
    op.alter_column('users', 'present_address',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('users', 'contact_number',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('users', 'sex',
                existing_type=sa.VARCHAR(length=50),
                type_=sa.Enum('male', 'female', 'other', 'prefer_not_to_say', name='sexenum'),
                existing_nullable=True,
                postgresql_using="sex::sexenum")

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'sex',
               existing_type=sa.Enum('male', 'female', 'other', 'prefer_not_to_say', name='sexenum'),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('users', 'contact_number',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'present_address',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'middle_initial',
               existing_type=sa.String(length=1),
               type_=sa.CHAR(length=1),
               existing_nullable=True)
    op.create_table('events',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('event_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('remarks', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'approved'::character varying, 'declined'::character varying]::text[])", name='events_status_check'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], name='events_approved_by_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='events_created_by_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='events_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('gts_responses',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('full_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('permanent_address', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('contact_email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('telephone', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('mobile', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('civil_status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('sex', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('birthday', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('degree', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('specialization', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('year_graduated', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('honors', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('exams', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('pursued_advance_degree', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('pursued_advance_degree_reasons', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('trainings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_employed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('employment_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('occupation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('company_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('company_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_sector', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('place_of_work', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('first_job', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('job_related_to_course', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('job_start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('months_to_first_job', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('job_find_methods', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('job_reasons', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('job_change_reasons', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('job_level_first', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_level_current', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('first_job_salary', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('curriculum_relevance_first_job', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('curriculum_relevance_second_job', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('useful_competencies', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('curriculum_improvement_suggestions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_satisfaction', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_satisfaction_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('desired_services', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_problems', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('submitted_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('ever_employed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('gts_responses_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('gts_responses_pkey'))
    )
    op.create_table('event_attendance',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=10), server_default=sa.text("'registered'::character varying"), autoincrement=False, nullable=True),
    sa.Column('registered_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('attended_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint("status::text = ANY (ARRAY['registered'::character varying, 'attended'::character varying, 'no_show'::character varying]::text[])", name=op.f('event_attendance_status_check')),
    sa.ForeignKeyConstraint(['event_id'], ['events.id'], name=op.f('event_attendance_event_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('event_attendance_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('event_attendance_pkey'))
    )
    # ### end Alembic commands ###
